name: "pharos-action"
branding:
  icon: "compass"
  color: "blue"
description: "GitHub action for running different Security Scans, that should be run before deploying to SKIP"
inputs:
  image_url:
    description: "An image_url of the form registry/repository:tag or registry/repository@digest"
    required: false
  trivy:
    description: "A boolean which determines whether or not Trivy vulnerability scan will be run. Defaults to true"
    required: false
    default: "true"
  tfsec:
    description: "A boolean which determines whether or not TFSec security scan will be run. Defaults to true"
    required: false
    default: "true"
  allow_severity_level:
    description: "A string which determines the highest level of severity the security scans can find while still succeeding workflows. Only `medium`, `high` and `critical` are allowed as input strings. Note that these values are case sensitive."
    required: false
    default: medium
  disable_severity_check:
    description: "Skip checking severity of scan results. Useful when running the action ad-hoc to update the Github security status."
    required: false
    default: "false"
  trivy_category:
    description: "A category for describing the Trivy action. Useful for differentiating between different runs of different images."
    required: false
    default: "Trivy"
  scan_platform_modules:
    description: "If you need to use terraform platform modules (github.com/kartverket/terraform-modules)"
    required: false
    default: "false"
  skip_dirs:
    description: "Comma seperated list of directories where traversal is skipped"
    required: false
    default: ""
  skip_files:
    description: "Comma seperated list of files where traversal is skipped"
    required: false
    default: "catalog-info.yaml"

runs:
  using: "composite"
  steps:
    - uses: octo-sts/action@a26b0c6455c7f13316f29a8766287f939e75f6c8 # v1.0.2
      if: inputs.scan_platform_modules == 'true'
      id: octo-sts
      with:
        scope: kartverket
        identity: kartverket_repos
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: ${{ inputs.checkout_submodules == 'true' && 'recursive' || 'false' }}
        token: ${{ inputs.checkout_submodules == 'true' && steps.octo-sts.outputs.token || github.token }}

    - name: hack for github internal repo access
      if: inputs.scan_platform_modules == 'true'
      run: git config --global url."https://x-access-token:${{ steps.octo-sts.outputs.token }}@github.com".insteadOf ssh://git@github.com
      shell: bash

    - name: Check If Both Scans Disabled
      if: (inputs.trivy == 'false' || inputs.image_url == '') && inputs.tfsec == 'false'
      shell: bash
      run: |
        echo "Error: TFSec is disabled and Trivy was either disabled or an image url was not set. Exiting."
        exit 1;

    - name: Check If Allowed Severity Level
      if: inputs.allow_severity_level != 'medium' && inputs.allow_severity_level != 'high' && inputs.allow_severity_level != 'critical'
      shell: bash
      env:
        ALLOW_SEVERITY_LEVEL: ${{ inputs.allow_severity_level }}
      run: |
        echo "Error: The input 'allow_severity_level' was not one of the allowed strings, 'high', 'critical' or 'medium'. Found: "$ALLOW_SEVERITY_LEVEL".";
        exit 1;

    #
    # Trivy config scan (previously TFsec)
    #

    - name: Run Trivy config scan
      if: inputs.tfsec == 'true'
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
      with:
        scan-type: 'config'
        format: sarif
        output: trivy-config.sarif
        severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        timeout: 15m
        skip-dirs: ${{ inputs.skip_dirs }}
        skip-files: ${{ inputs.skip_files }}
        version: 'v0.58.2'

    - name: Upload SARIF file
      if: inputs.tfsec == 'true'
      uses: github/codeql-action/upload-sarif@v4
      with:
        sarif_file: trivy-config.sarif

    #
    # Trivy
    #

    - name: Log Into GHCR Registry with Token
      if: inputs.trivy == 'true' && inputs.image_url != ''
      uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Pull Image to Scan from Docker
      if: inputs.trivy == 'true' && inputs.image_url != ''
      env:
        IMAGE_URL: ${{ inputs.image_url }}
      shell: bash
      run: docker pull "$IMAGE_URL"

    - name: Run Trivy Vulnerability Scanner on Image
      if: inputs.trivy == 'true' && inputs.image_url != ''
      uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
      with:
        image-ref: ${{ inputs.image_url }}
        format: sarif
        output: trivy-results.sarif
        severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
        timeout: 15m
        # No need to setup Trivy again, if the config scan is enabled and ran first
        skip-setup-trivy: ${{ inputs.tfsec == 'true' }}

    - name: Upload Trivy Scan Results to GitHub Security Tab
      if: inputs.trivy == 'true' && inputs.image_url != ''
      uses: github/codeql-action/upload-sarif@v4
      with:
        sarif_file: trivy-results.sarif
        category: ${{ inputs.trivy_category }}

    #
    # Check results
    #

    - name: Set high and critical severity outputs
      if: inputs.disable_severity_check != 'true'
      id: severity_check_outputs
      shell: bash
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        content_header="Accept: application/vnd.github+json"
        auth_header="Authorization: Bearer $GITHUB_TOKEN"
        base_url="https://api.github.com/repos/$GITHUB_REPOSITORY/code-scanning/alerts?ref=$GITHUB_REF&state=open"

        result_severity_check_high=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=high")
        result_severity_check_critical=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=critical")
        result_severity_check_error=$(curl -s -H "$content_header" -H "$auth_header" "${base_url}&severity=error")

        is_high_vuln_present=$([[ "$result_severity_check_high" =~ [a-zA-Z] ]] && echo "true" || echo "false")
        is_critical_vuln_present=$([[ "$result_severity_check_critical" =~ [a-zA-Z] || "$result_severity_check_error" =~ [a-zA-Z] ]] && echo "true" || echo "false")

        echo "is_high_vuln_present=$is_high_vuln_present" >> $GITHUB_OUTPUT
        echo "is_critical_vuln_present=$is_critical_vuln_present" >> $GITHUB_OUTPUT

    - name: Succeed or fail based on severity
      if: inputs.disable_severity_check != 'true'
      id: severity_check
      shell: bash
      env:
        REF_NAME: ${{ github.ref_name }}
        ALLOW_SEVERITY_LEVEL: ${{ inputs.allow_severity_level }}
      run: |
        pr_number=$( echo $REF_NAME | sed 's/\/.*//');
        is_high_vuln_present=${{ steps.severity_check_outputs.outputs.is_high_vuln_present }}
        is_critical_vuln_present=${{ steps.severity_check_outputs.outputs.is_critical_vuln_present }}

        error_start_message="Error: Vulnerabilities were found of level"
        error_end_message="Go to the Code Scanning section of the GitHub Security tab to review these vulnerabilities."
        error_search_pr_message="Search for is:open pr:"$pr_number" to find PR related vulnerabilities."

        _message="Undefined. Bug in this action. Fix."
        _exit_code=0

        if [[ $is_high_vuln_present == 'false' &&  $is_critical_vuln_present == 'false' ]]
        then
          _message="Success! No high or critical code scanning alerts."
          _exit_code=0;
        else
          if [[ $ALLOW_SEVERITY_LEVEL == 'medium' ]]
          then
            if [[ ${{ github.event_name }} == 'pull_request' ]]
            then
              _message="$error_start_message high or critical. $error_end_message $error_search_pr_message";
              _exit_code=1
            else
              _message="$error_start_message high or critical found on branch '$REF_NAME'. $error_end_message";
              _exit_code=1;
            fi
        
          elif [[ $ALLOW_SEVERITY_LEVEL == 'high' ]]
          then
            if [[ $is_critical_vuln_present == 'false' ]]
            then
              _message="Only high vulnerabilities detected! Allowing due to input ALLOW_SEVERITY_LEVEL being set to high.";
              _exit_code=0;
              
            elif [[ ${{ github.event_name }} == 'pull_request' ]]
            then
              _message="$error_start_message critical. $error_end_message $error_search_pr_message";
              _exit_code=1
            else
              _message="$error_start_message critical found on '$REF_NAME' branch. $error_end_message";
              _exit_code=1
            fi
        
          elif [[ $ALLOW_SEVERITY_LEVEL == 'critical' ]]
          then
            _message="High or critical vulnerabilities detected! Allowing due to input ALLOW_SEVERITY_LEVEL being set to critical.";
            _exit_code=0;
        
          else
            _message="Input 'ALLOW_SEVERITY_LEVEL' was not one of the known values, found '$ALLOW_SEVERITY_LEVEL'. If you see this message, please contact SKIP.";
            _exit_code=1
          fi

        fi
        
        [[ ${_exit_code} -gt 0 ]] && _summary_prefix=":x: " || _summary_prefix=""
        echo "${_message}";
        echo "${_summary_prefix}${_message}" >> $GITHUB_STEP_SUMMARY;
        exit ${_exit_code};
